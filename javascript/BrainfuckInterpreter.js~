function bfmain() {

    var pointer = 0;
    var mem = [0x0];
    
    var code = document.getElementById("code").value.split('');
    var input = [];
    var output = "";

    input = new_input(input, input_pointer);
	
    code = parse(code);

    var input_pointer = 0;
    var code_pointer = 0;
    
    while(code_pointer < code.length){
	

	switch(code[code_pointer]){    
	case "<":
	    pointer = pointerleft(pointer);
	    break;
	case ">":
	    mem, pointer = pointerright(mem, pointer);
	    break;
	case"+":
	    mem[pointer]++;
	    break;
	case"-":
	    mem[pointer]--;
	    break;
	case".":
	    output = output + String.fromCharCode(mem[pointer]);
	    document.getElementById("output").innerHTML = output;
	    break;
	case",":
	    mem, input, input_pointer = mem_insert(mem, pointer, input, input_pointer);
	    break;

	case"[":
	    if(mem[pointer] == 0)
		code_pointer = findendloop(code_pointer, code);
	    break;
	case"]":
	    if(mem[pointer] != 0)
		code_pointer = findbeginloop(code_pointer, code);
	    break;
	    
	    

	}
	code_pointer++;

    }
    

}


function mem_insert(mem, pointer, input, input_pointer){


    if(input_pointer == input.length)
    {

	document.getElementById("Errors").innerHTML = "All inputs have been exhausted, ending the interpreter to prevent a infinite loop.";
	quit();

    }

    
    if(typeof input[input_pointer] == "string")
    {
	mem[pointer] = input[input_pointer].charCodeAt(0);

    }    
    else
    {
	mem[pointer] = input[input_pointer];
    }
    
    input_pointer++;


    return mem, input, input_pointer;
    

}

function new_input(input, input_pointer) {

    input = document.getElementById("input").value.split('');

    
    
    
    document.getElementById("Errors").innerHTML = "";
    
    var parsed_input = [];
    for(var x = 0; x < input.length - 1; x++)
    {
	
	if(input[x] != "\n")
	{   

	    parsed_input.push(input[x]);
	    
	}	
    }
        
    return parsed_input;

}


function parse(code){

    var parsed = [];
    for(var x = 0; x < code.length; x++){
	if(code[x] == "<" || code[x] == ">" || code[x] == "+" || code[x] == "-" || code[x] == "," || code[x] == "." || code[x] == "[" || code[x] == "]")
	{
	    parsed.push(code[x]);
	}

    }

    return parsed;
    
}


function pointerleft(position) {

    if(position == 0)
    {
	position = 0;

    }
    else{

	position--;

    }

    return position;
   
}

function pointerright(mem, pointer) {

    if(pointer == mem.length - 1)
    {
	mem.push(0x0);

    }

    pointer++;
	

    return mem, pointer;

}

function findendloop(code_pointer, code){

    while(code[code_pointer] != "]")
    {
	code_pointer++;
	if(code[code_pointer] == "[")
	    code_pointer = findendloop(code_pointer, code) + 1;
    }

    return code_pointer;
    

}


function findbeginloop(code_pointer, code) {

    while(code[code_pointer] != "[")
    {
	code_pointer--;
	if(code[code_pointer] == "]")
	    code_pointer = findbeginloop(code_pointer, code) - 1;
    }
    
    
    return code_pointer;

}


window.onload = function(){

    document.getElementById("execute").addEventListener("click", bfmain);
};


